// Generated by dust (version 0.15.3) - do not edit
#include <cpp11.hpp>

[[cpp11::register]]
cpp11::sexp dust_plague_stochastic_humans_gpu_info();
[[cpp11::register]]
SEXP dust_cpu_plague_stochastic_humans_alloc(cpp11::list r_pars, bool pars_multi, cpp11::sexp r_time,
                         cpp11::sexp r_n_particles, int n_threads,
                         cpp11::sexp r_seed, bool deterministic,
                         cpp11::sexp gpu_config, cpp11::sexp ode_control);

[[cpp11::register]]
cpp11::sexp dust_cpu_plague_stochastic_humans_capabilities();

[[cpp11::register]]
SEXP dust_cpu_plague_stochastic_humans_run(SEXP ptr, cpp11::sexp r_time_end);

[[cpp11::register]]
SEXP dust_cpu_plague_stochastic_humans_simulate(SEXP ptr, cpp11::sexp time_end);

[[cpp11::register]]
SEXP dust_cpu_plague_stochastic_humans_run_adjoint(SEXP ptr);

[[cpp11::register]]
SEXP dust_cpu_plague_stochastic_humans_set_index(SEXP ptr, cpp11::sexp r_index);

[[cpp11::register]]
SEXP dust_cpu_plague_stochastic_humans_update_state(SEXP ptr, SEXP r_pars, SEXP r_state,
                                           SEXP r_time, SEXP r_set_initial_state,
                                           SEXP index, SEXP reset_step_size);

[[cpp11::register]]
SEXP dust_cpu_plague_stochastic_humans_state(SEXP ptr, SEXP r_index);

[[cpp11::register]]
SEXP dust_cpu_plague_stochastic_humans_time(SEXP ptr);

[[cpp11::register]]
void dust_cpu_plague_stochastic_humans_reorder(SEXP ptr, cpp11::sexp r_index);

[[cpp11::register]]
SEXP dust_cpu_plague_stochastic_humans_resample(SEXP ptr, cpp11::doubles r_weights);

[[cpp11::register]]
SEXP dust_cpu_plague_stochastic_humans_rng_state(SEXP ptr, bool first_only, bool last_only);

[[cpp11::register]]
SEXP dust_cpu_plague_stochastic_humans_set_rng_state(SEXP ptr, cpp11::raws rng_state);

[[cpp11::register]]
SEXP dust_cpu_plague_stochastic_humans_set_data(SEXP ptr, cpp11::list data, bool shared);

[[cpp11::register]]
SEXP dust_cpu_plague_stochastic_humans_compare_data(SEXP ptr);

[[cpp11::register]]
SEXP dust_cpu_plague_stochastic_humans_filter(SEXP ptr, SEXP time_end,
                                     bool save_trajectories,
                                     cpp11::sexp time_snapshot,
                                     cpp11::sexp min_log_likelihood);

[[cpp11::register]]
void dust_cpu_plague_stochastic_humans_set_n_threads(SEXP ptr, int n_threads);

[[cpp11::register]]
int dust_cpu_plague_stochastic_humans_n_state(SEXP ptr);

[[cpp11::register]]
void dust_cpu_plague_stochastic_humans_set_stochastic_schedule(SEXP ptr, SEXP time);

[[cpp11::register]]
SEXP dust_cpu_plague_stochastic_humans_ode_statistics(SEXP ptr);
#include <dust/r/dust.hpp>

// Generated by odin.dust (version 0.3.13) - do not edit
// [[dust::class(plague_stochastic_humans)]]
// [[dust::time_type(discrete)]]
// [[dust::param(season, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(a, has_default = TRUE, default_value = 0.004, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(beta_h, has_default = TRUE, default_value = 0.01, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(beta_r, has_default = TRUE, default_value = 4.7, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(d_f, has_default = TRUE, default_value = 10L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(d_h, has_default = TRUE, default_value = 0.04, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(d_r, has_default = TRUE, default_value = 0.2, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(dt, has_default = TRUE, default_value = list("/", 1L, 365L), rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(g_h, has_default = TRUE, default_value = 0.1, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(g_r, has_default = TRUE, default_value = 0.02, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(I_ini, has_default = TRUE, default_value = 10L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(K_f, has_default = TRUE, default_value = 6.57, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(K_h, has_default = TRUE, default_value = 5000L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(K_r, has_default = TRUE, default_value = 2500L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(m_h, has_default = TRUE, default_value = 26L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(m_r, has_default = TRUE, default_value = 20L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p, has_default = TRUE, default_value = 0.975, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(r_f, has_default = TRUE, default_value = 20L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(r_h, has_default = TRUE, default_value = 0.045, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(r_r, has_default = TRUE, default_value = 5L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(S_ini, has_default = TRUE, default_value = 1L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(seasonal_amplitude, has_default = TRUE, default_value = 0.2, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
class plague_stochastic_humans {
public:
  using real_type = double;
  using rng_state_type = dust::random::generator<real_type>;
  using data_type = dust::no_data;
  struct shared_type {
    real_type a;
    real_type beta_h;
    real_type beta_r;
    real_type birth_rate_h;
    real_type birth_rate_h_clipped;
    real_type d_f;
    real_type d_h;
    real_type d_r;
    int dim_season;
    real_type dt;
    real_type g_h;
    real_type g_r;
    real_type I_ini;
    real_type initial_D;
    real_type initial_D_h;
    real_type initial_F;
    real_type initial_I;
    real_type initial_I_h;
    real_type initial_N;
    real_type initial_R;
    real_type initial_R_h;
    real_type initial_S;
    real_type initial_S_h;
    real_type K_f;
    real_type K_h;
    real_type K_r;
    real_type m_h;
    real_type m_r;
    real_type p;
    real_type p_flea_death;
    real_type p_human_birth;
    real_type p_human_death;
    real_type p_IR;
    real_type p_IR_h;
    real_type p_rat_death;
    real_type r_f;
    real_type r_h;
    real_type r_r;
    real_type S_ini;
    std::vector<real_type> season;
    real_type seasonal_amplitude;
  };
  struct internal_type {
  };
  plague_stochastic_humans(const dust::pars_type<plague_stochastic_humans>& pars) :
    shared(pars.shared), internal(pars.internal) {
  }
  size_t size() const {
    return 10;
  }
  std::vector<real_type> initial(size_t step, rng_state_type& rng_state) {
    std::vector<real_type> state(10);
    state[0] = shared->initial_S;
    state[1] = shared->initial_I;
    state[2] = shared->initial_R;
    state[3] = shared->initial_D;
    state[4] = shared->initial_N;
    state[5] = shared->initial_F;
    state[6] = shared->initial_S_h;
    state[7] = shared->initial_I_h;
    state[8] = shared->initial_R_h;
    state[9] = shared->initial_D_h;
    return state;
  }
  void update(size_t step, const real_type * state, rng_state_type& rng_state, real_type * state_next) {
    const real_type S = state[0];
    const real_type I = state[1];
    const real_type R = state[2];
    const real_type F = state[5];
    const real_type N = state[4];
    const real_type S_h = state[6];
    const real_type I_h = state[7];
    const real_type R_h = state[8];
    real_type season_t = shared->season[step + 1 - 1];
    real_type T_r = S + I + R;
    real_type K_f_seasonal = shared->K_f * dust::math::pow<real_type>((1 + shared->seasonal_amplitude), season_t);
    real_type n_deaths_I = dust::random::binomial<real_type>(rng_state, I, shared->p_rat_death);
    real_type n_deaths_I_h = dust::random::binomial<real_type>(rng_state, I_h, shared->p_human_death);
    real_type n_deaths_R = dust::random::binomial<real_type>(rng_state, R, shared->p_rat_death);
    real_type n_deaths_R_h = dust::random::binomial<real_type>(rng_state, R_h, shared->p_human_death);
    real_type n_deaths_S = dust::random::binomial<real_type>(rng_state, S, shared->p_rat_death);
    real_type n_deaths_S_h = dust::random::binomial<real_type>(rng_state, S_h, shared->p_human_death);
    real_type p_flea_to_rat = 1 - dust::math::exp(- shared->a * T_r * shared->dt);
    real_type rat_birth_rate = shared->r_r * (1 - T_r / (real_type) shared->K_r);
    real_type flea_growth_rate = shared->r_f * N * (1 - N / (real_type) K_f_seasonal) * shared->dt;
    real_type n_fleas_to_rats = dust::random::binomial<real_type>(rng_state, F, p_flea_to_rat);
    real_type n_IR = dust::random::binomial<real_type>(rng_state, I - n_deaths_I, shared->p_IR);
    real_type n_IR_h = dust::random::binomial<real_type>(rng_state, I_h - n_deaths_I_h, shared->p_IR_h);
    real_type rat_birth_rate_clipped = (rat_birth_rate > 0 ? rat_birth_rate : 0);
    real_type births_h = dust::random::binomial<real_type>(rng_state, S_h + R_h, shared->p_human_birth);
    real_type lambda_r = shared->beta_r * n_fleas_to_rats / (real_type) T_r;
    real_type n_recovered = dust::random::binomial<real_type>(rng_state, n_IR, shared->g_r);
    real_type n_recovered_h = dust::random::binomial<real_type>(rng_state, n_IR_h, shared->g_h);
    real_type p_rat_birth = 1 - dust::math::exp(- rat_birth_rate_clipped * shared->dt);
    real_type remaining_fleas = F - n_fleas_to_rats;
    state_next[4] = N + flea_growth_rate + n_fleas_to_rats / (real_type) T_r;
    real_type lambda_h = shared->beta_h * remaining_fleas;
    real_type n_births_R = dust::random::binomial<real_type>(rng_state, R - n_deaths_R, p_rat_birth * static_cast<real_type>(0.75));
    real_type n_births_S = dust::random::binomial<real_type>(rng_state, S - n_deaths_S, p_rat_birth);
    real_type n_flea_deaths = dust::random::binomial<real_type>(rng_state, remaining_fleas, shared->p_flea_death);
    real_type n_new_free_fleas = dust::math::floor(N * (n_deaths_I + (n_IR - n_recovered)));
    real_type p_SI = 1 - dust::math::exp(- lambda_r);
    state_next[3] = n_deaths_S + n_deaths_I + n_deaths_R + (n_IR - n_recovered);
    state_next[9] = n_deaths_S_h + n_deaths_I_h + n_deaths_R_h + (n_IR_h - n_recovered_h);
    state_next[8] = R_h + n_recovered_h - n_deaths_R_h;
    real_type n_resistant_births = dust::random::binomial<real_type>(rng_state, n_births_R, shared->p);
    real_type n_SI = dust::random::binomial<real_type>(rng_state, S - n_deaths_S, p_SI);
    real_type p_SI_h = 1 - dust::math::exp(- lambda_h * shared->dt);
    state_next[5] = F + n_new_free_fleas - n_fleas_to_rats - n_flea_deaths;
    real_type n_SI_h = dust::random::binomial<real_type>(rng_state, S_h - n_deaths_S_h, p_SI_h);
    real_type n_susceptible_births = n_births_S + n_births_R - n_resistant_births;
    state_next[1] = I + n_SI - n_IR - n_deaths_I;
    state_next[2] = R + n_recovered + n_resistant_births - n_deaths_R;
    state_next[7] = I_h + n_SI_h - n_IR_h - n_deaths_I_h;
    state_next[0] = S - n_SI + n_susceptible_births - n_deaths_S;
    state_next[6] = S_h - n_SI_h + births_h - n_deaths_S_h;
  }
private:
  std::shared_ptr<const shared_type> shared;
  internal_type internal;
};
#include <array>
#include <cpp11/R.hpp>
#include <cpp11/sexp.hpp>
#include <cpp11/doubles.hpp>
#include <cpp11/integers.hpp>
#include <cpp11/list.hpp>
#include <cpp11/strings.hpp>
#include <memory>
#include <vector>

template <typename T>
inline bool is_na(T x);

template <>
inline bool is_na(int x) {
  return x == NA_INTEGER;
}

template <>
inline bool is_na(double x) {
  return ISNA(x);
}

inline size_t object_length(cpp11::sexp x) {
  return ::Rf_xlength(x);
}

template <typename T>
void user_check_value(T value, const char *name, T min, T max) {
  if (is_na(value)) {
    cpp11::stop("'%s' must not be NA", name);
  }
  if (!is_na(min) && value < min) {
    cpp11::stop("Expected '%s' to be at least %g", name, (double) min);
  }
  if (!is_na(max) && value > max) {
    cpp11::stop("Expected '%s' to be at most %g", name, (double) max);
  }
}

template <typename T>
void user_check_array_value(const std::vector<T>& value, const char *name,
                            T min, T max) {
  for (auto& x : value) {
    user_check_value(x, name, min, max);
  }
}

inline size_t user_get_array_rank(cpp11::sexp x) {
  if (!::Rf_isArray(x)) {
    return 1;
  } else {
    cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
    return dim.size();
  }
}

template <size_t N>
void user_check_array_rank(cpp11::sexp x, const char *name) {
  size_t rank = user_get_array_rank(x);
  if (rank != N) {
    if (N == 1) {
      cpp11::stop("Expected a vector for '%s'", name);
    } else if (N == 2) {
      cpp11::stop("Expected a matrix for '%s'", name);
    } else {
      cpp11::stop("Expected an array of rank %d for '%s'",
                  static_cast<int>(N), name);
    }
  }
}

template <size_t N>
void user_check_array_dim(cpp11::sexp x, const char *name,
                          const std::array<int, N>& dim_expected) {
  cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  for (size_t i = 0; i < N; ++i) {
    if (dim[(int)i] != dim_expected[i]) {
      Rf_error("Incorrect size of dimension %d of '%s' (expected %d)",
               static_cast<int>(i + 1), name, dim_expected[i]);
    }
  }
}

template <>
inline void user_check_array_dim<1>(cpp11::sexp x, const char *name,
                                    const std::array<int, 1>& dim_expected) {
  if ((int)object_length(x) != dim_expected[0]) {
    cpp11::stop("Expected length %d value for '%s'", dim_expected[0], name);
  }
}

template <size_t N>
void user_set_array_dim(cpp11::sexp x, const char *name,
                        std::array<int, N>& dim) {
  cpp11::integers dim_given = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  std::copy(dim_given.begin(), dim_given.end(), dim.begin());
}

template <>
inline void user_set_array_dim<1>(cpp11::sexp x, const char *name,
                                  std::array<int, 1>& dim) {
  dim[0] = object_length(x);
}

template <typename T>
T user_get_scalar(cpp11::list user, const char *name,
                  const T previous, T min, T max) {
  T ret = previous;
  cpp11::sexp x = user[name];
  if (x != R_NilValue) {
    if (object_length(x) != 1) {
      cpp11::stop("Expected a scalar numeric for '%s'", name);
    }
    // TODO: when we're getting out an integer this is a bit too relaxed
    if (TYPEOF(x) == REALSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else if (TYPEOF(x) == INTSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else {
      cpp11::stop("Expected a numeric value for %s", name);
    }
  }

  if (is_na(ret)) {
    cpp11::stop("Expected a value for '%s'", name);
  }
  user_check_value<T>(ret, name, min, max);
  return ret;
}

template <>
inline float user_get_scalar<float>(cpp11::list user, const char *name,
                                    const float previous, float min, float max) {
  double value = user_get_scalar<double>(user, name, previous, min, max);
  return static_cast<float>(value);
}

template <typename T>
std::vector<T> user_get_array_value(cpp11::sexp x, const char * name,
                                    T min, T max) {
  std::vector<T> ret = cpp11::as_cpp<std::vector<T>>(x);
  user_check_array_value<T>(ret, name, min, max);
  return ret;
}

template <typename T, size_t N>
std::vector<T> user_get_array_fixed(cpp11::list user, const char *name,
                                    const std::vector<T> previous,
                                    const std::array<int, N>& dim,
                                    T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_check_array_dim<N>(x, name, dim);

  return user_get_array_value<T>(x, name, min, max);
}

template <typename T, size_t N>
std::vector<T> user_get_array_variable(cpp11::list user, const char *name,
                                       std::vector<T> previous,
                                       std::array<int, N>& dim,
                                       T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_set_array_dim<N>(x, name, dim);

  return user_get_array_value<T>(x, name, min, max);
}

template <>
inline std::vector<float> user_get_array_value(cpp11::sexp x, const char * name,
                                               float min, float max) {
  // NOTE: possible under/overflow here for min/max because we've
  // downcast this.
  std::vector<double> value = user_get_array_value<double>(x, name, min, max);
  std::vector<float> ret(value.size());
  std::copy(value.begin(), value.end(), ret.begin());
  return ret;
}

// This is sum with inclusive "from", exclusive "to", following the
// same function in odin
template <typename real_type, typename container>
__host__ __device__
real_type odin_sum1(const container x, size_t from, size_t to) {
  real_type tot = 0.0;
  for (size_t i = from; i < to; ++i) {
    tot += x[i];
  }
  return tot;
}

inline cpp11::writable::integers integer_sequence(size_t from, size_t len) {
  cpp11::writable::integers ret(len);
  int* data = INTEGER(ret);
  for (size_t i = 0, j = from; i < len; ++i, ++j) {
    data[i] = j;
  }
  return ret;
}
namespace dust {
template<>
dust::pars_type<plague_stochastic_humans> dust_pars<plague_stochastic_humans>(cpp11::list user) {
  using real_type = typename plague_stochastic_humans::real_type;
  auto shared = std::make_shared<plague_stochastic_humans::shared_type>();
  plague_stochastic_humans::internal_type internal;
  shared->initial_D = 0;
  shared->initial_D_h = 0;
  shared->initial_F = 0;
  shared->initial_I_h = 0;
  shared->initial_R_h = 0;
  shared->a = static_cast<real_type>(0.0040000000000000001);
  shared->beta_h = static_cast<real_type>(0.01);
  shared->beta_r = static_cast<real_type>(4.7000000000000002);
  shared->d_f = 10;
  shared->d_h = static_cast<real_type>(0.040000000000000001);
  shared->d_r = static_cast<real_type>(0.20000000000000001);
  shared->dt = 1 / (real_type) 365;
  shared->g_h = static_cast<real_type>(0.10000000000000001);
  shared->g_r = static_cast<real_type>(0.02);
  shared->I_ini = 10;
  shared->K_f = static_cast<real_type>(6.5700000000000003);
  shared->K_h = 5000;
  shared->K_r = 2500;
  shared->m_h = 26;
  shared->m_r = 20;
  shared->p = static_cast<real_type>(0.97499999999999998);
  shared->r_f = 20;
  shared->r_h = static_cast<real_type>(0.044999999999999998);
  shared->r_r = 5;
  shared->S_ini = 1;
  shared->seasonal_amplitude = static_cast<real_type>(0.20000000000000001);
  shared->a = user_get_scalar<real_type>(user, "a", shared->a, NA_REAL, NA_REAL);
  shared->beta_h = user_get_scalar<real_type>(user, "beta_h", shared->beta_h, NA_REAL, NA_REAL);
  shared->beta_r = user_get_scalar<real_type>(user, "beta_r", shared->beta_r, NA_REAL, NA_REAL);
  shared->d_f = user_get_scalar<real_type>(user, "d_f", shared->d_f, NA_REAL, NA_REAL);
  shared->d_h = user_get_scalar<real_type>(user, "d_h", shared->d_h, NA_REAL, NA_REAL);
  shared->d_r = user_get_scalar<real_type>(user, "d_r", shared->d_r, NA_REAL, NA_REAL);
  shared->dt = user_get_scalar<real_type>(user, "dt", shared->dt, NA_REAL, NA_REAL);
  shared->g_h = user_get_scalar<real_type>(user, "g_h", shared->g_h, NA_REAL, NA_REAL);
  shared->g_r = user_get_scalar<real_type>(user, "g_r", shared->g_r, NA_REAL, NA_REAL);
  shared->I_ini = user_get_scalar<real_type>(user, "I_ini", shared->I_ini, NA_REAL, NA_REAL);
  shared->K_f = user_get_scalar<real_type>(user, "K_f", shared->K_f, NA_REAL, NA_REAL);
  shared->K_h = user_get_scalar<real_type>(user, "K_h", shared->K_h, NA_REAL, NA_REAL);
  shared->K_r = user_get_scalar<real_type>(user, "K_r", shared->K_r, NA_REAL, NA_REAL);
  shared->m_h = user_get_scalar<real_type>(user, "m_h", shared->m_h, NA_REAL, NA_REAL);
  shared->m_r = user_get_scalar<real_type>(user, "m_r", shared->m_r, NA_REAL, NA_REAL);
  shared->p = user_get_scalar<real_type>(user, "p", shared->p, NA_REAL, NA_REAL);
  shared->r_f = user_get_scalar<real_type>(user, "r_f", shared->r_f, NA_REAL, NA_REAL);
  shared->r_h = user_get_scalar<real_type>(user, "r_h", shared->r_h, NA_REAL, NA_REAL);
  shared->r_r = user_get_scalar<real_type>(user, "r_r", shared->r_r, NA_REAL, NA_REAL);
  shared->S_ini = user_get_scalar<real_type>(user, "S_ini", shared->S_ini, NA_REAL, NA_REAL);
  std::array <int, 1> dim_season;
  shared->season = user_get_array_variable<real_type, 1>(user, "season", shared->season, dim_season, NA_REAL, NA_REAL);
  shared->dim_season = shared->season.size();
  shared->seasonal_amplitude = user_get_scalar<real_type>(user, "seasonal_amplitude", shared->seasonal_amplitude, NA_REAL, NA_REAL);
  shared->birth_rate_h = shared->r_h;
  shared->initial_I = shared->I_ini;
  shared->initial_N = shared->K_f;
  shared->initial_R = shared->K_r * (1 - shared->S_ini);
  shared->initial_S = shared->K_r * shared->S_ini;
  shared->initial_S_h = shared->K_h;
  shared->p_flea_death = 1 - dust::math::exp(- shared->d_f * shared->dt);
  shared->p_human_death = 1 - dust::math::exp(- shared->d_h * shared->dt);
  shared->p_IR = 1 - dust::math::exp(- shared->m_r * shared->dt);
  shared->p_IR_h = 1 - dust::math::exp(- shared->m_h * shared->dt);
  shared->p_rat_death = 1 - dust::math::exp(- shared->d_r * shared->dt);
  shared->birth_rate_h_clipped = (shared->birth_rate_h > 0 ? shared->birth_rate_h : 0);
  shared->p_human_birth = 1 - dust::math::exp(- shared->birth_rate_h_clipped * shared->dt);
  return dust::pars_type<plague_stochastic_humans>(shared, internal);
}
template <>
cpp11::sexp dust_info<plague_stochastic_humans>(const dust::pars_type<plague_stochastic_humans>& pars) {
  const std::shared_ptr<const plague_stochastic_humans::shared_type> shared = pars.shared;
  cpp11::writable::strings nms({"S", "I", "R", "D", "N", "F", "S_h", "I_h", "R_h", "D_h"});
  cpp11::writable::list dim(10);
  dim[0] = cpp11::writable::integers({1});
  dim[1] = cpp11::writable::integers({1});
  dim[2] = cpp11::writable::integers({1});
  dim[3] = cpp11::writable::integers({1});
  dim[4] = cpp11::writable::integers({1});
  dim[5] = cpp11::writable::integers({1});
  dim[6] = cpp11::writable::integers({1});
  dim[7] = cpp11::writable::integers({1});
  dim[8] = cpp11::writable::integers({1});
  dim[9] = cpp11::writable::integers({1});
  dim.names() = nms;
  cpp11::writable::list index(10);
  index[0] = cpp11::writable::integers({1});
  index[1] = cpp11::writable::integers({2});
  index[2] = cpp11::writable::integers({3});
  index[3] = cpp11::writable::integers({4});
  index[4] = cpp11::writable::integers({5});
  index[5] = cpp11::writable::integers({6});
  index[6] = cpp11::writable::integers({7});
  index[7] = cpp11::writable::integers({8});
  index[8] = cpp11::writable::integers({9});
  index[9] = cpp11::writable::integers({10});
  index.names() = nms;
  size_t len = 10;
  using namespace cpp11::literals;
  return cpp11::writable::list({
           "dim"_nm = dim,
           "len"_nm = len,
           "index"_nm = index});
}
}

cpp11::sexp dust_plague_stochastic_humans_gpu_info() {
  return dust::gpu::r::gpu_info();
}
using model_cpu = dust::dust_cpu<plague_stochastic_humans>;

cpp11::sexp dust_cpu_plague_stochastic_humans_capabilities() {
  return dust::r::dust_capabilities<model_cpu>();
}

SEXP dust_cpu_plague_stochastic_humans_alloc(cpp11::list r_pars, bool pars_multi, cpp11::sexp r_time,
                             cpp11::sexp r_n_particles, int n_threads,
                             cpp11::sexp r_seed, bool deterministic,
                             cpp11::sexp gpu_config, cpp11::sexp ode_control) {
  return dust::r::dust_cpu_alloc<plague_stochastic_humans>(r_pars, pars_multi, r_time, r_n_particles,
                                        n_threads, r_seed, deterministic,
                                        gpu_config, ode_control);
}

SEXP dust_cpu_plague_stochastic_humans_run(SEXP ptr, cpp11::sexp r_time_end) {
  return dust::r::dust_run<model_cpu>(ptr, r_time_end);
}

SEXP dust_cpu_plague_stochastic_humans_simulate(SEXP ptr, cpp11::sexp r_time_end) {
  return dust::r::dust_simulate<model_cpu>(ptr, r_time_end);
}

SEXP dust_cpu_plague_stochastic_humans_run_adjoint(SEXP ptr) {
  return dust::r::dust_run_adjoint<model_cpu>(ptr);
}

SEXP dust_cpu_plague_stochastic_humans_set_index(SEXP ptr, cpp11::sexp r_index) {
  dust::r::dust_set_index<model_cpu>(ptr, r_index);
  return R_NilValue;
}

SEXP dust_cpu_plague_stochastic_humans_update_state(SEXP ptr, SEXP r_pars, SEXP r_state,
                                           SEXP r_time, SEXP r_set_initial_state, SEXP index, SEXP reset_step_size) {
  return dust::r::dust_update_state<model_cpu>(ptr, r_pars, r_state, r_time,
                                                      r_set_initial_state, index, reset_step_size);
}

SEXP dust_cpu_plague_stochastic_humans_state(SEXP ptr, SEXP r_index) {
  return dust::r::dust_state<model_cpu>(ptr, r_index);
}

SEXP dust_cpu_plague_stochastic_humans_time(SEXP ptr) {
  return dust::r::dust_time<model_cpu>(ptr);
}

void dust_cpu_plague_stochastic_humans_reorder(SEXP ptr, cpp11::sexp r_index) {
  return dust::r::dust_reorder<model_cpu>(ptr, r_index);
}

SEXP dust_cpu_plague_stochastic_humans_resample(SEXP ptr, cpp11::doubles r_weights) {
  return dust::r::dust_resample<model_cpu>(ptr, r_weights);
}

SEXP dust_cpu_plague_stochastic_humans_rng_state(SEXP ptr, bool first_only, bool last_only) {
  return dust::r::dust_rng_state<model_cpu>(ptr, first_only, last_only);
}

SEXP dust_cpu_plague_stochastic_humans_set_rng_state(SEXP ptr, cpp11::raws rng_state) {
  dust::r::dust_set_rng_state<model_cpu>(ptr, rng_state);
  return R_NilValue;
}

SEXP dust_cpu_plague_stochastic_humans_set_data(SEXP ptr, cpp11::list data,
                                       bool shared) {
  dust::r::dust_set_data<model_cpu>(ptr, data, shared);
  return R_NilValue;
}

SEXP dust_cpu_plague_stochastic_humans_compare_data(SEXP ptr) {
  return dust::r::dust_compare_data<model_cpu>(ptr);
}

SEXP dust_cpu_plague_stochastic_humans_filter(SEXP ptr, SEXP time_end,
                                     bool save_trajectories,
                                     cpp11::sexp time_snapshot,
                                     cpp11::sexp min_log_likelihood) {
  return dust::r::dust_filter<model_cpu>(ptr, time_end,
                                                save_trajectories,
                                                time_snapshot,
                                                min_log_likelihood);
}

void dust_cpu_plague_stochastic_humans_set_n_threads(SEXP ptr, int n_threads) {
  return dust::r::dust_set_n_threads<model_cpu>(ptr, n_threads);
}

int dust_cpu_plague_stochastic_humans_n_state(SEXP ptr) {
  return dust::r::dust_n_state<model_cpu>(ptr);
}

void dust_cpu_plague_stochastic_humans_set_stochastic_schedule(SEXP ptr, SEXP time) {
  dust::r::dust_set_stochastic_schedule<model_cpu>(ptr, time);
}

SEXP dust_cpu_plague_stochastic_humans_ode_statistics(SEXP ptr) {
  return dust::r::dust_ode_statistics<model_cpu>(ptr);
}
