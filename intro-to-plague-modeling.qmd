---
title: "Bubonic Plague: A Mathematical Modeling Approach"
author: "Nick Gauthier"
date: "`r Sys.Date()`"
output: 
  html_document:
    toc: true
    toc_float: true
    theme: united
    highlight: tango
    code_folding: show
runtime: shiny
editor: 
  markdown: 
    wrap: 72
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

# Load required packages
library(tidyverse)
library(odin)
library(shiny)
library(miniUI)
library(yaml)

# Source utility functions and gadget
source("R/plague_utils.R")
source("R/plague_gadget.R")
```

## Introduction

### Historical Context

Bubonic plague, caused by the bacterium *Yersinia pestis*, has been one
of history's most devastating diseases. The "Black Death" of the 14th
century killed an estimated 30-60% of Europe's population. The disease
persists today, with modern outbreaks providing crucial data for
understanding its transmission dynamics.

### The Role of Mathematical Modeling

Mathematical models help us understand disease transmission mechanisms
and predict outbreak patterns. For plague, these models are particularly
interesting because they must capture the complex interactions between
three populations:

1.  Rats (the primary host)
2.  Fleas (the vector)
3.  Humans (the incidental host)

This notebook explores a mathematical model based on the work of Keeling
& Gilligan, focusing on the rat-flea transmission cycle.

## Model Structure

### Basic Components

The model tracks five main variables:

-    $S_R$: Susceptible rats
-    $I_R$: Infected rats
-    $R_R$: Resistant rats
-    $N$: Average number of fleas per rat (flea index)
-    $F$: Free infectious fleas

### Core Equations

The system is described by the following differential equations:

$$
\begin{align}
\frac{dS_R}{dt} &= \underbrace{r_R S_R \left( 1 - \frac{T_R}{K_R} \right)}_{\text{births}} + 
                   \underbrace{r_R R_R(1 - p)}_{\text{non-immune births}} - 
                   \underbrace{d_R S_R}_{\text{deaths}} - 
                   \underbrace{\beta_R \frac{S_R}{T_R}F\left[1-exp(-aT_R)\right]}_{\text{infections}}\\
\frac{dI_R}{dt} &= \underbrace{\beta_R \frac{S_R}{T_R}F\left[1-exp(-aT_R)\right]}_{\text{infections}} - 
                   \underbrace{(d_R + m_R)I_R}_{\text{death/recovery}}\\
\frac{dR_R}{dt} &= \underbrace{r_R R_R \left(p - \frac{T_R}{K_R}\right)}_{\text{immune births}} + 
                   \underbrace{m_R g_RI_R}_{\text{recovery}} - 
                   \underbrace{d_R R_R}_{\text{natural death}}\\
\frac{dN}{dt} &= \underbrace{r_F N \left(1 - \frac{N}{K_F}\right)}_{\text{flea births}} + 
                  \underbrace{\frac{F}{T_R} \left(1 - \exp(-\alpha T_R)\right)}_{\text{free fleas finding rats}}\\
\frac{dF}{dt} &= \underbrace{(d_R + m_R (1 - g_R)) I_R N}_{\text{free infected fleas from dead rats}} - 
                  \underbrace{d_F F}_{\text{infected flea deaths}}
\end{align}
$$

Each term represents a specific biological process:

-   Rat population dynamics follow a logistic growth model
-   Fleas multiply on rats and transfer between hosts
-   Disease transmission occurs through flea bites
-   Rats can recover and develop immunity

## Model Implementation

### Base Model Definition

```{r define-base-model}
#| message: false
# Define the base plague model
plague_model <- odin::odin({
  ## State variables initial conditions
  initial(S_r) <- K_r - 1         # Susceptible rats
  initial(I_r) <- 1               # Infected rats 
  initial(R_r) <- 0               # Resistant rats
  initial(N) <- K_f               # Flea index (fleas per rat)
  initial(F) <- 0                 # Free infectious fleas
  
  ## Total rat population
  T_r <- S_r + I_r + R_r  
  
  ## Force of infection in humans
  lambda <- F * exp(-a * T_r)
  output(lambda) <- lambda  
  
  ## Differential equations for rat population
  deriv(S_r) <- r_r * S_r * (1 - T_r/K_r) +                # Births from susceptibles
                r_r * R_r * (1 - p) -                       # Non-immune births from resistant
                d_r * S_r -                                 # Natural deaths
                beta_r * (S_r/T_r) * F * (1 - exp(-a*T_r))  # Infections
  
  deriv(I_r) <- beta_r * (S_r/T_r) * F * (1 - exp(-a*T_r)) -  # New infections
                (d_r + m_r) * I_r                              # Death/Recovery
  
  deriv(R_r) <- r_r * R_r * (p - T_r/K_r) +   # Inherited immune births
                m_r * g_r * I_r -              # Recovery
                d_r * R_r                      # Natural death
  
  ## Flea dynamics
  deriv(N) <- r_f * N * (1 - N/K_f) +                   # Logistic growth
              F * (1 - exp(-a*T_r)) / T_r         # Free fleas finding rats
  
  deriv(F) <- (d_r + m_r * (1 - g_r)) * I_r * N -       # Free infected fleas from dead rats
              d_f * F                                    # Free flea deaths
  
  ## Parameters  
  K_r <- user(2500)     # Rat carrying capacity
  r_r <- user(5)        # Rat population growth rate 
  p <- user(0.975)      # Probability of inherited resistance
  d_r <- user(0.2)      # Natural death rate of rats
  beta_r <- user(4.7)   # Rat infection rate from fleas
  a <- user(0.004)      # Flea search efficiency
  m_r <- user(20)       # Infected rat mortality rate
  g_r <- user(0.02)     # Probability rat survives infection
  r_f <- user(20)       # Flea reproduction rate
  K_f <- user(6.57)     # Flea carrying capacity per rat
  d_f <- user(10)       # Death rate of free fleas
})
```

```{r, echo = FALSE}
# Define helper functions in the same environment
run_plague_simulation <- function(params, times = NULL, 
                                seasonal = FALSE, seasonal_amplitude = 0.2) {
  if (is.null(times)) {
    times <- seq(0, 40, by = 1/365)
  }
  
  model <- plague_model$new(user = params)
  output <- model$run(times) |> 
    as_tibble()
  
  return(output)
}

plot_plague_simulation <- function(output, log_scale = FALSE, 
                                 plot_type = "all") {
  if (plot_type == "all") {
    p <- output |> 
      pivot_longer(-t) |> 
      ggplot(aes(t, value)) +
      geom_line() +
      facet_wrap(~name, scales = 'free_y') +
      labs(
        title = "Plague Model Simulation",
        x = "Time (years)",
        y = "Population"
      )
  } else if (plot_type == "phase") {
    p <- output |>
      ggplot(aes(S_r, I_r)) +
      geom_path() +
      labs(
        title = "Phase Portrait",
        x = "Susceptible Rats",
        y = "Infected Rats"
      )
  }
  
  if (log_scale && plot_type != "phase") {
    p <- p + scale_y_log10()
  }
  
  p + theme_minimal()
}

calculate_model_stats <- function(output) {
  list(
    peak_infected = max(output$I_r),
    final_susceptible = tail(output$S_r, 1),
    final_resistant = tail(output$R_r, 1),
    average_flea_index = mean(output$N),
    min_total_rats = min(output$S_r + output$I_r + output$R_r)
  )
}

calculate_R0 <- function(params) {
  with(params, {
    beta_r * K_r * (1 - exp(-a * K_r)) / (d_r + m_r)
  })
}
```

### Seasonal Model Definition

```{r define-seasonal-model}
# Define the seasonal plague model
plague_model_seasonal <- odin::odin({
  ## State variables initial conditions
  initial(S_r) <- K_r - 1         # Susceptible rats
  initial(I_r) <- 1               # Infected rats 
  initial(R_r) <- 0               # Resistant rats
  initial(N) <- K_f               # Flea index (fleas per rat)
  initial(F) <- 0                 # Free infectious fleas
  
  ## Total rat population
  T_r <- S_r + I_r + R_r  
  
  ## Force of infection in humans
  lambda <- F * exp(-a * T_r)
  output(lambda) <- lambda  
  
  ## Seasonal forcing on flea carrying capacity
  season_t <- interpolate(day, season, 'spline')
  K_f_seasonal <- K_f * (1 + seasonal_amplitude) ^ season_t
  
  ## Differential equations for rat population
  deriv(S_r) <- r_r * S_r * (1 - T_r/K_r) +                # Births from susceptibles
                r_r * R_r * (1 - p) -                       # Non-immune births from resistant
                d_r * S_r -                                 # Natural deaths
                beta_r * (S_r/T_r) * F * (1 - exp(-a*T_r))  # Infections
  
  deriv(I_r) <- beta_r * (S_r/T_r) * F * (1 - exp(-a*T_r)) -  # New infections
                (d_r + m_r) * I_r                              # Death/Recovery
  
  deriv(R_r) <- r_r * R_r * (p - T_r/K_r) +   # Inherited immune births
                m_r * g_r * I_r -              # Recovery
                d_r * R_r                      # Natural death
  
  ## Flea dynamics with seasonal carrying capacity
  deriv(N) <- r_f * N * (1 - N/K_f_seasonal) +       # Logistic growth with seasonal K
              F * (1 - exp(-a*T_r)) / T_r            # Free fleas finding rats
  
  deriv(F) <- (d_r + m_r * (1 - g_r)) * I_r * N -   # Free infected fleas from dead rats
              d_f * F                                # Free flea deaths
  
  ## Parameters  
  K_r <- user(2500)     # Rat carrying capacity
  r_r <- user(5)        # Rat population growth rate 
  p <- user(0.975)      # Probability of inherited resistance
  d_r <- user(0.2)      # Natural death rate of rats
  beta_r <- user(4.7)   # Rat infection rate from fleas
  a <- user(0.004)      # Flea search efficiency
  m_r <- user(20)       # Infected rat mortality rate
  g_r <- user(0.02)     # Probability rat survives infection
  r_f <- user(20)       # Flea reproduction rate
  K_f <- user(6.57)     # Flea carrying capacity per rat
  d_f <- user(10)       # Death rate of free fleas
  
  ## Seasonal forcing parameters
  seasonal_amplitude <- user(0.2)  # Amplitude of seasonal forcing
  day[] <- user()                 # Vector of days for interpolation
  season[] <- user()              # Vector of seasonal values
  dim(day) <- user()
  dim(season) <- user()
})

# Test the models compile
model <- plague_model$new()
model_seasonal <- plague_model_seasonal$new(
  day = seq(0, 365, by = 1),
  season = sin(2 * pi * seq(0, 365, by = 1) / 365)
)
```

These model definitions implement the differential equations described
earlier. Note:

1.  The base model assumes constant parameters throughout the year
2.  The seasonal model adds time-varying flea carrying capacity
3.  Both models share the same core structure but differ in their flea
    population dynamics
4.  Model parameters are set as user-defined to allow easy modification
5.  Initial conditions start with one infected rat and no resistant rats

The models are tested for compilation after definition to ensure they're
working correctly. These model definitions are then used by our utility
functions for simulation and analysis.

## Interactive Model Explorer

Use this interactive tool to explore how different parameters affect the
model dynamics:

```{r explorer, echo=FALSE}
# Create the UI elements directly in the notebook
sidebarLayout(
  sidebarPanel(
    # Rat parameters
    h4("Rat Parameters"),
    sliderInput("K_r", "Carrying Capacity (K_r)", 
                min = 1000, max = 5000, value = 2500),
    sliderInput("r_r", "Growth Rate (r_r)", 
                min = 1, max = 10, value = 5),
    sliderInput("p", "Inherited Resistance (p)", 
                min = 0, max = 1, value = 0.975),
    sliderInput("d_r", "Death Rate (d_r)", 
                min = 0, max = 1, value = 0.2),
    
    # Disease parameters
    h4("Disease Parameters"),
    sliderInput("beta_r", "Infection Rate (beta_r)", 
                min = 0, max = 10, value = 4.7),
    sliderInput("m_r", "Recovery Rate (m_r)", 
                min = 0, max = 40, value = 20),
    sliderInput("g_r", "Survival Probability (g_r)", 
                min = 0, max = 1, value = 0.02),
    
    # Flea parameters
    h4("Flea Parameters"),
    sliderInput("K_f", "Flea Capacity (K_f)", 
                min = 0, max = 20, value = 6.57),
    sliderInput("r_f", "Flea Growth (r_f)", 
                min = 0, max = 40, value = 20),
    sliderInput("d_f", "Flea Death (d_f)", 
                min = 0, max = 20, value = 10),
    sliderInput("a", "Search Efficiency (a)", 
                min = 0, max = 0.01, value = 0.004),
    
    # Simulation controls
    h4("Simulation Settings"),
    checkboxInput("seasonal", "Include Seasonality", value = FALSE),
    conditionalPanel(
      condition = "input.seasonal == true",
      sliderInput("seasonal_amp", "Seasonal Amplitude", 
                  min = 0, max = 1, value = 0.2)
    ),
    actionButton("run_sim", "Run Simulation", class = "btn-primary")
  ),
  
  mainPanel(
    tabsetPanel(
      tabPanel("Time Series",
        plotOutput("plague_plot", height = "400px")
      ),
      tabPanel("Phase Portrait",
        plotOutput("phase_plot", height = "400px")
      ),
      tabPanel("Statistics",
        verbatimTextOutput("model_stats")
      )
    )
  )
)

# Server logic
observeEvent(input$run_sim, {
  # Collect current parameters
  params <- list(
    K_r = input$K_r,
    r_r = input$r_r,
    p = input$p,
    d_r = input$d_r,
    beta_r = input$beta_r,
    m_r = input$m_r,
    g_r = input$g_r,
    K_f = input$K_f,
    r_f = input$r_f,
    d_f = input$d_f,
    a = input$a
  )
  
  # Run simulation
  sim_output <- run_plague_simulation(
    params, 
    seasonal = input$seasonal,
    seasonal_amplitude = input$seasonal_amp
  )
  
  # Update time series plot
  output$plague_plot <- renderPlot({
    plot_plague_simulation(sim_output, log_scale = TRUE)
  })
  
  # Update phase portrait
  output$phase_plot <- renderPlot({
    plot_plague_simulation(sim_output, plot_type = "phase")
  })
  
  # Update statistics
  output$model_stats <- renderPrint({
    stats <- calculate_model_stats(sim_output)
    cat("Model Statistics:\n")
    cat("-----------------\n")
    cat(sprintf("Peak infected rats: %.1f\n", stats$peak_infected))
    cat(sprintf("Final susceptible rats: %.1f\n", stats$final_susceptible))
    cat(sprintf("Final resistant rats: %.1f\n", stats$final_resistant))
    cat(sprintf("Average flea index: %.2f\n", stats$average_flea_index))
    cat(sprintf("Minimum total rat population: %.1f\n", stats$min_total_rats))
    
    cat("\nBasic Reproduction Number:\n")
    cat("-------------------------\n")
    R0 <- calculate_R0(params)
    cat(sprintf("R0 = %.2f\n", R0))
  })
})
```

## Parameter Analysis

### Basic Reproduction Number

The basic reproduction number ($R_0$) is a key epidemiological parameter
that determines whether an outbreak will occur. For this model:

$$
R_0 = \frac{\beta_R K_R (1 - e^{-aK_R})}{d_R + m_R}
$$

```{r r0-analysis}
# Load default parameters
params <- load_plague_parameters()

# Calculate and display R0
R0 <- calculate_R0(params)
cat(sprintf("With default parameters, R0 = %.2f\n", R0))

# Show what this means
if (R0 > 1) {
  cat("Since R0 > 1, the disease can spread in the population")
} else {
  cat("Since R0 < 1, the disease will die out")
}
```

```{r}
#knitr::knit_exit()
```

### Sensitivity Analysis

Let's examine how key parameters affect the dynamics:

```{r sensitivity, eval=FALSE}
# Run sensitivity analysis on infection rate
sensitivity_results <- run_sensitivity_analysis(
  params,
  param_name = "beta_r",
  range = seq(0.5, 1.5, by = 0.1)
)

# Plot results
plot_sensitivity(sensitivity_results, "I_r") +
  labs(title = "Sensitivity to Infection Rate (beta_r)")
```

## Seasonal Effects

Many rodent populations show seasonal variation. We can incorporate this
by making the flea carrying capacity seasonal:

```{r seasonal}
# Run seasonal simulation
seasonal_output <- run_plague_simulation(
  params,
  seasonal = TRUE,
  seasonal_amplitude = 0.2
)

# Plot seasonal results
plot_plague_simulation(seasonal_output) +
  labs(subtitle = "With Seasonal Forcing")
```

## Discussion

### Model Limitations

This model makes several simplifying assumptions:

1.  Homogeneous mixing of populations
2.  Deterministic dynamics
3.  No spatial structure
4.  No human intervention

### Applications

Despite its limitations, the model provides insights into:

-   Conditions necessary for plague persistence
-   Effect of interventions (e.g., rat control)
-    Role of seasonal variations
-    Importance of flea dynamics

## References

1.  Keeling, M. J., & Gilligan, C. A. (2000). Metapopulation dynamics of
    bubonic plague.
2.  Bacaër, N. (2011). A Short History of Mathematical Population
    Dynamics.
3.  World Health Organization. Plague Fact Sheet.

## Appendix: Code Details

The complete implementation includes:

-   Parameter management system
-   Simulation engine
-   Visualization tools
-   Analysis utilities

See the source code in the R/ directory for details.
