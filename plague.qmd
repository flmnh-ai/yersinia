---
title: "Stochastic model"
format: html
editor: visual
---

```{r setup}
library(tidyverse)
#remotes::install_github("mrc-ide/odin.dust")
library(odin.dust)
```



### Stochastic

```{r}
# Create 5x5 grid contact matrix 
make_contact_matrix <- function(n_rows=5, n_cols=5) {
  n <- n_rows * n_cols
  m <- matrix(0, n, n)
  
  for(i in 1:n) {
    # Get row/col position
    row <- ceiling(i/n_cols)
    col <- ((i-1) %% n_cols) + 1
    
    # Add neighbors
    if(row > 1) m[i, i-n_cols] <- 1  # up
    if(row < n_rows) m[i, i+n_cols] <- 1  # down 
    if(col > 1) m[i, i-1] <- 1  # left
    if(col < n_cols) m[i, i+1] <- 1  # right
  }
  
  # Normalize rows so neighbors sum to 1
  m <- t(apply(m, 1, function(x) x/sum(x)))
  return(m)
}

get_season <- function(years = 1) {
 days <- 1:(365 * years)
 season <- (days - 1) %% 365 / 365
 return(season)
}

```

```{r}
generator <- odin_dust('R/plague_stochastic.R', debug_enable = FALSE)
```

```{r}
n_particles <- 1
dt <- 1/52
npop <- 16
years <- 30
timesteps <- 1:(dt ^ -1 * years)
season <- get_season(years)
seasonal_kf <- sin(2 * pi * season)

contact_matrix <- make_contact_matrix(sqrt(npop), sqrt(npop))
mod <- generator$new(pars = list(I_ini = c(10, rep(0, npop - 1)), 
                                 S_ini = 1,
                                 K_r = 10000 / npop,
                                 contact = contact_matrix, #matrix(0,nrow = 16, ncol = 16), # this should cause divide by zero errors!
                                 K_f = 4,
                                 dt = dt,
                                 p = 0.6,
                                 season = seasonal_kf,
                                 # g_r = 1,
                                 npop = npop),
                     time = 1L,
                     n_particles = n_particles,
                     n_threads = 4L,
                     seed = 6L
)


state <- mod$simulate(timesteps) |>
  array(dim = c(npop, 5, n_particles, length(timesteps)), 
        dimnames = list(subpop = 1:npop, 
                        compartment = c('S', 'I', 'R', 'N', 'F'), 
                        rep = 1:n_particles, 
                        time = timesteps * dt)) |>
  cubelyr::as.tbl_cube(met_name = 'value') |>  
  as_tibble()
```

Plot the time series of infected rats at each location.
```{r}
state |> 
  pivot_wider(names_from = compartment) |>
  ggplot(aes(time, ymax = I, group = rep)) +
  geom_ribbon(aes(ymin = 0), alpha = 1) +
  facet_wrap(~subpop) +
  labs(
    title = "Stochastic Simulation of Bubonic Plague Transmission",
    x = "Time (years)",
    y = "Population",
    color = "Compartment"
  ) +
  theme_bw()
```

Plot all model state variables at each location.
```{r}
state |>
ggplot(aes(time, value, group = rep)) +
  geom_line() +
  facet_grid(compartment~subpop, scales = 'free_y') +
  labs(
    title = "Stochastic Simulation of Bubonic Plague Transmission",
    x = "Time (years)",
    y = "Population",
    color = "Compartment"
  ) +
  theme_bw()
```
Plot the aggregate max force of infection in humans (double check plots!)
```{r}
state |>
  pivot_wider(names_from = compartment) |>
  group_by(time) |>
  summarize(I = sum(I)) |>
ggplot(aes(time, ymax = I)) +
  geom_ribbon(ymin = 0) +
  labs(
    title = "Stochastic Simulation of Bubonic Plague Transmission",
    x = "Time (years)",
    y = "Population",
    color = "Compartment"
  ) +
  scale_y_log10() +
  theme_bw()

state |>
  pivot_wider(names_from = compartment) |>
  group_by(time) |>
  summarize(I = sum(I), S = sum(S), R = sum(R), F = sum(F)) |>
  mutate(lambda = F * exp(-1e-4 * (S + I + R))) |>
ggplot(aes(time, lambda)) +
  geom_line() +
  labs(
    title = "Stochastic Simulation of Bubonic Plague Transmission",
    x = "Time (years)",
    y = "Population",
    color = "Compartment"
  ) +
  scale_y_log10() +
  theme_bw()
```


Don't go past here yet!
```{r}
knitr::knit_exit()
```

Now with humans

```{r}
generator_humans <- odin_dust('plague_stochastic_humans.R', debug_enable = FALSE)
```

so too many humans are dying? but not showing up in the death stats? need to check for conservation? and what about

```{r}
n_particles <- 1
dt <- 1/52
years <- 10
timesteps <- 1:(dt ^ -1 * years)
season <- get_season(years)
seasonal_kf <- sin(2 * pi * season)

mod <- generator_humans$new(pars = list(I_ini = c(10), 
                                                  S_ini = 1,
                                                  K_r = 5000,#contact_matrix, # this should cause divide by zero errors!
                                 K_f = 3,
                                                  dt = dt,
                                                  p = 0.6,
                                 season = seasonal_kf),
                                                 # g_r = 1,),
                                      time = 1L,
    n_particles = n_particles,
    n_threads = 1L,
    seed = 6L
    )


state <- mod$simulate(timesteps) |>
  array(dim = c(10, n_particles, length(timesteps)), 
        dimnames = list(compartment = c('S', 'I', 'R', 'D', 'N', 'F', 'Sh', 'Ih', 'Rh', 'Dh'), 
                        rep = 1:n_particles, 
                        time = timesteps * dt)) |>
  cubelyr::as.tbl_cube(met_name = 'value') |>  
  as_tibble()

state |> 
    pivot_wider(names_from = compartment) |>
    mutate(Tr = S + I + R, Th = Sh + Ih + Rh) |>
  pivot_longer(S:Th, names_to = 'compartment') |>
ggplot(aes(time, ymax = value, group = rep)) +
  geom_ribbon(aes(ymin = 0), alpha = 1) +
  facet_wrap(~compartment, scales = 'free_y') +
  labs(
    title = "Stochastic Simulation of Bubonic Plague Transmission",
    x = "Time (years)",
    y = "Population",
    color = "Compartment"
  ) +
  theme_bw()
```

```{r}
state |> 
  filter(compartment == 'Dh') |>
  filter(time < 1) |>
  summarize(sum(value))


state |> 
  pivot_wider(names_from = compartment) |>
    mutate(Tr = S + I + R, Th = Sh + Ih + Rh) |>
filter(time < 1) |>
  ggplot(aes(time, Th)) + geom_line()
```

```{r}
state |> 
  filter(compartment == 'D') |>
  filter(time < 1) |>
  summarize(sum(value))


state |> 
  pivot_wider(names_from = compartment) |>
    mutate(Tr = S + I + R, Th = Sh + Ih + Rh) |>
filter(time < 1) |>
  ggplot(aes(time, Tr)) + geom_line()
```


